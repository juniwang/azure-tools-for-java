<project name="automate build process" default="all">
    <property file="build_process.properties" />
	<target name="init" depends="clean">
		<!-- create directories inside build location -->
		<mkdir dir="${buildLoc}"/>
		<mkdir dir="${buildLoc}/build_config"/>
		<mkdir dir="${buildLoc}/build_dir/features"/>
		<mkdir dir="${buildLoc}/build_dir/plugins"/>
		<mkdir dir="${eclipseLoc}"/>
		<!-- copy build.properties required for building WAUiAutomation to build_config -->
		<copy file="${TFSLoc}/BuildProcessFiles/build.properties" todir="${buildLoc}/build_config"/>
		<!-- copy plugins and features to build_dir -->
		<copy todir="${buildLoc}/build_dir/features/Windows Azure Feature Project">
			<fileset dir="${TFSLoc}/Windows Azure Feature Project"/>
		</copy>
		<copy todir="${buildLoc}/build_dir/plugins/WAEclipsePlugin">
			<fileset dir="${TFSLoc}/WAEclipsePlugin"/>
		</copy>
		<copy todir="${buildLoc}/build_dir/features/com.persistent.feature.WABuildAutomation">
			<fileset dir="${TFSLoc}/com.persistent.feature.WABuildAutomation"/>
		</copy>
		<copy todir="${buildLoc}/build_dir/plugins/WAUiAutomation">
			<fileset dir="${TFSLoc}/WAUiAutomation"/>
		</copy>
	</target>
		<target name="clean">
		<!-- delete all contents from build location -->
		<delete dir="${buildLoc}">
			</delete>
		<!-- delete all contents from eclipse install location -->
		<delete dir="${eclipseLoc}">
		</delete>
	</target>
	<target name="build" depends="init">
		<!-- unzip eclipse with SWTBOT to eclipseLoc -->
		<unzip src="${eclipseZipLoc}" dest="${eclipseLoc}"/>
		<!-- build the plugins -->
		<exec executable="java">
			<arg line="-jar '${eclipseLoc}/eclipse/plugins/${eclipseLaunchJar}'
				 -application org.eclipse.ant.core.antRunner
				 -buildfile '${eclipseLoc}/eclipse/plugins/${eclipseBuild}/scripts/build.xml'
				 -DbuildDirectory='${buildLoc}/build_dir' 
				 -DbaseLocation='${eclipseLoc}/eclipse' 
				 -Dbuilder='${buildLoc}/build_config'"/>
		</exec>
		<!-- install the plugins into eclipse -->
		<unzip src="${buildLoc}/build_dir/I.TestBuild/com.persistent.feature.WABuildAutomation-TestBuild.zip" dest="${eclipseLoc}"/>
	</target>
	<!-- Targe and property for running UI Automation -->	 
    <property environment="env"/> 
    <property name="eclipse-home" value="${eclipseLoc}/eclipse" /> 
    <property name="plugin-name" value="WAUiAutomation" /> 
    <property name="test-classname" value="com.persistent.uiautomation.AllTestRun" /> 
    <property name="library-file" value="${eclipseLoc}/${swtlibloc}" /> 
    <target name="uitest" depends="build">  
       <property name="jvmOption" value=""></property>
         <property name="temp-workspace" value="AutomationWorkspace"/> 
          <delete dir="${temp-workspace}" quiet="true"/> 
        <ant target="swtbot-test" antfile="${library-file}" dir="${eclipse-home}"> 
            <property name="data-dir" value="${temp-workspace}"/> 
            <property name="plugin-name" value="${plugin-name}"/> 
            <property name="os" value="win32"/>
             <property name="ws" value="win32"/> 
            <property name="arch" value="x86"/> 
            <property name="classname" value="${test-classname}"/> 
            <property name="vmargs" value="-Xms128M -XX:MaxPermSize=512m -Xmx512M"/> 
        </ant>
     </target> 
	 <!-- Junits test start here -->
  <property name="project_name" value="pmljunits"/>
  <property name="src" location="${targetLoc}/src"/>
  <property name="junittest" location="${targetLoc}/test"/>
  <property name="build" location="${targetLoc}/bin"/>
  <property name="dist"  location="${targetLoc}/dist"/>
  <property name="lib"  location="${targetLoc}/extlib"/>
  <property name="res"  location="${targetLoc}/res"/>
  <property name="reports" location="${targetLoc}/reports"/>
  <!-- the names of various distributable files -->
  <property name="jar_name" value="${project_name}.jar"/>
  <property name="war_name" value="${project_name}.war"/>
	<!-- top level targets -->
  <target name="compile" depends="init junit" description="compile the source code " >
		<javac srcdir="${src}" includeantruntime="false" destdir="${build}">  
			<classpath>
				<fileset dir="${lib}">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
		</javac>
		<javac srcdir="${junittest}" includeantruntime="false" destdir="${build}">  
			<classpath>
				<fileset dir="${lib}">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
		</javac>
		<copy includeemptydirs="false" todir="${build}">
            <fileset dir="${src}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="${build}">
            <fileset dir="${junittest}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
  </target>
  <target name="dist" depends="compile" description="generate the distributable files " >
    <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
    <jar jarfile="${dist}/${jar_name}" basedir="${build}"/>
  </target>
  <target name="clean junit"
        description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${targetLoc}"/>
	<mkdir dir = "${targetLoc}"/>
    <!--<delete dir="${dist}"/>
    <delete dir="${reports}"/> -->
  </target>
  <target name="fetchTestdata" depends = "clean junit"
        description="Fetch all latest test data from tfs location without read only attribute">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <!--delete dir="${targetLoc}"/ -->
     <exec executable="xcopy"> 
    <arg line="${srcLoc} ${targetLoc} /s"/> 
  </exec>
     </target>
 	<target name="run-tests" depends="compile" description="run your test suite" >
		<junit printsummary="yes" haltonfailure="no" showoutput="yes" dir="${targetLoc}">
			<classpath>
				<pathelement path="${build}"/>
				<fileset dir="${lib}">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>			
 		  <batchtest fork="yes" todir="${reports}/raw/">
		  	<formatter type="xml"/>
		    <fileset dir="${src}">
		      <include name="**/*Test*.java"/>
		    </fileset>
		    <fileset dir="${junittest}">
		      <include name="**/*Test*.java"/>
		    </fileset>
		  </batchtest>
		</junit>	
	</target>
  <target name ="test" depends="run-tests">
		<junitreport todir="${reports}">
		  <fileset dir="${reports}/raw/">
		    <include name="TEST-*.xml"/>
		  </fileset>
		  <report format="frames" todir="${reports}\html\"/>
		</junitreport>
  </target>
  <target name ="run" depends="" description="if this project can be run, run it" >
  </target>
	<!-- supporting targets -->
		 <target name="init junit" description="initialize the build environment" >
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create directory structures -->
    <mkdir dir="${build}"/>
    <mkdir dir="${dist}/lib"/>
    <mkdir dir="${reports}"/>
    <mkdir dir="${reports}/raw/"/>
    <mkdir dir="${reports}/html/"/>
  </target>
    <target name="junit" depends="fetchTestdata, test">
   </target>
   <target name="all" depends="junit, uitest">
   </target>
</project>

